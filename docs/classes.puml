@startuml

!include styles.puml

class OWAController {
  Top level entity for controlling everything.
  Entry point, starts all sub-controllers.
  ..
  oscServer
  scController
  lightController
  inputController
  store
}

class LightController {
  Maps renderers to physical lights, handles
  serial connection & communication.
  ..
  net.Socket socket
  OPCStream opcStream
  // Array of pixel data to stream into
  // Fadecandy over serial.
  OPCStrand fadecandyPixels
  /'Dict knobLightRenderers{\sequencerName: KnobLightsRenderer}'/
  /'knobLightPixels'/
  /'instructionSignRenderer'/
  /'instructionSignPixels'/
  /'tawSignRenderer'/
  /'tawSignPixels'/

  Dict levelLightRenderers{levelName: LevelLightsRenderer}
  Dict levelMenuLightRenderers{levelName: LevelMenuLightsRenderer}
}
OWAController *-- LightController

class LightRenderer {
  Renders and returns a buffer of pixels.
  Could switch between animations as
  state changes.
  ..
  store
  Array allAnimations
  LightAnimation currentAnimation
  --
  + render(t)
  + getOutputBuffer()
}

class LevelLightsRenderer {
  Render the main lights on a given
  level.
  ..
  State store
  String levelName
  LevelSequencerPlayingAnimation sequencerPlayingAnimation
}
LightController *-- LevelLightsRenderer
LightRenderer <|-- LevelLightsRenderer

class LevelMenuLightsRenderer {
  Render the control menu lights for
  a given level.
  ..
  State store
  String levelName
  /'LevelMenuDefaultAnimation menuDefaultAnimation'/
  /'LevelMenuActiveAnimation menuActiveAnimation'/
}
LightController *-- LevelMenuLightsRenderer
LightRenderer <|-- LevelMenuLightsRenderer

/'class KnobLightsRenderer {'/
  /'State store'/
  /'String sequencerName'/
  /'String knobId'/
  /'SequencerLightsPlaybackAnimation playbackAnimation'/
  /'QueuedSequencerAnimation queuedAnimation'/
  /'LightAnimation currentAnimation'/
  /'KnobActiveAnimation knobActiveAnimation'/
  /'KnobMeterQueuedAnimation meterQueuedAnimation'/
  /'KnobTransmittingAnimation knobTransmittingAnimation'/
/'}'/
/'KnobLightsRenderer *-- LightController'/

/'class InstructionsSignLightsRenderer {'/
  
/'}'/
/'InstructionsSignLightsRenderer *-- LightController'/

/'class TAWSignLightsRenderer {'/
  
/'}'/
/'TAWSignLightsRenderer *-- LightController'/

/'class SequencerLightsPlaybackAnimation {'/
  /'State store'/
  /'String sequencerName'/
  /'..'/
  /'handleMeterChanged'/
/'}'/
/'SequencerLightsPlaybackAnimation *-- KnobLightsRenderer'/

/'class QueuedSequencerAnimation'/
/'QueuedSequencerAnimation *-- KnobLightsRenderer'/

class LightAnimation {
  PixelBuffer buffer
  Number startTime
}
LightRenderer *-- LightAnimation
/'LightAnimation <|-- QueuedSequencerAnimation'/
/'LightAnimation <|-- SequencerLightsPlaybackAnimation'/

class SequencerPlayingAnimation
LightAnimation <|-- SequencerPlayingAnimation

class InputController {
  serialport.SerialPort arduinoPort
  ..
  + handleKnobMessage(data)
  + handleButtonMessage(data)
}
OWAController *-- InputController

class SCController {
  supercolliderjs.scapi.SCAPI scapi
}
OWAController *-- SCController

class State {
  bool supercolliderInitializationStarted
  bool lightingInitializationStarted
  bool supercolliderIsReady
  bool lightingIsReady
  float tempo
  Array bufferList[["bufferFileName", \bufferName]]
  Dict oneShotSounds{\soundName: OneShotSoundState}
  
  RythmicControlsState rhythmicControls

  SessionState session
}
OWAController *-- State

class RhythmicControlsState {
  Dict levels{levelName: RhythmicLevel}
}
State *-- RhythmicControlsState


class RhythmicLevel {
  RhythmicLevelControls controls
  RhythmicLevelControlSpecs controlSpecs

  KnobState controlKnob
  Array controlMenus[ControlMenuState menu]

  SequencerState sequencer
}
RhythmicControlsState *-- RhythmicLevel

class RhythmicLevelControls {
  Control offset
  Control balance
}
RhythmicLevel *-- RhythmicLevelControls

class Control {
  unmappedValue
  value
}
RhythmicLevelControls *-- Control

class RhythmicLevelControlSpecs {
  Spec offset
  Spec balance
}
RhythmicLevel *-- RhythmicLevelControlSpecs

class Spec {
  Array options
}
RhythmicLevelControlSpecs *-- Spec

/'class ContinuousControlSpec {'/
  /'minval'/
  /'maxval'/
  /'String warp'/
  /'step'/
  /'default'/
/'}'/
/'ContinuousControl *-- ContinuousControlSpec'/

/'class DiscreteControlSpec {'/
  /'Array options'/
  /'default'/
/'}'/
/'DiscreteControl *-- DiscreteControlSpec'/

/'class ContinuousControl {'/
  /'value'/
  /'ContinuousControlSpec spec'/
/'}'/
/'RhythmicLevelControls *-- ContinuousControl'/

/'class DiscreteControl {'/
  /'value'/
  /'DiscreteControlSpec spec'/
/'}'/
/'RhythmicLevelControls *-- DiscreteControl'/


class ControlMenuState {
  String currentControlName
  Boolean isActive
  int cursorIndex
}
RhythmicLevel *-- ControlMenuState


class OneShotSoundState {
  name
  playingState
  bufName
  delay
}
State *-- OneShotSoundState

class SequencerState {
  name
  transport{}
    int beat
  meter{}
    int numBeats
    int beatDur
  playingState
}
RhythmicLevel *-- SequencerState

class KnobState {
  float position
  bool isActive
}
RhythmicLevel *-- KnobState

class SessionState {
  Enum stage
  Moment initTime
}
State *-- SessionState

class SoundController {
  outputChannel
  store
  sequencers
  oneShotSounds
  bufManager
}
SCController .. SoundController

class SCStateStore {
  
}
SoundController *-- SCStateStore

/'class LeftSequencer {'/
  
/'}'/
/'SoundController *-- LeftSequencer'/
/'class CenterSequencer {'/
  
/'}'/
/'SoundController *-- CenterSequencer'/
/'class RightSequencer {'/
  
/'}'/
/'SoundController *-- RightSequencer'/

@enduml
